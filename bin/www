#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("server-workorder:server");

// import package db
const db = require("../app/db");
const http = require("http");
// const socketIo = require("socket.io");
// const Checkout = require("../app/api/checkoutWO/model");
// const User = require("../app/api/user/model");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Create SocketIo.
 */
// const io = socketIo(server, {
//   cors: {
//     origin: "*",
//     methods: ["GET", "POST"],
//   },
// });

// io.on("connection", (socket) => {
//   console.log("Client connected");

//   // Mendengarkan notifikasi dari server ketika status work order berubah menjadi approve
//   socket.on("workOrderApproved", async (workOrderId) => {
//     try {
//       // Temukan work order berdasarkan ID
//       const workOrder = await Checkout.findById(id).populate("UserRequest");

//       // Jika work order tidak ditemukan, lemparkan error
//       if (!workOrder) {
//         throw new NotFoundError(`Tidak ada WorkOrder dengan id: ${id}`);
//       }

//       //Dapatkan ID pengguna dari properti UserRequest
//       const userId = workOrder.UserRequest;

//       //Temukan pengguna yang sesuai berdasarkan ID pengguna
//       const dataUser = await User.findById(userId);

//       // Kirim notifikasi ke setiap pengguna terkait yang bukan UserApprove
//       workOrder.users.forEach(() => {
//         if (dataUser !== "UserApprove") {
//           socket.emit("workOrderStatusChanged", {
//             workOrderId: workOrderId,
//             newStatus: workOrder.status,
//           });
//         }
//       });
//     } catch (error) {
//       console.error(
//         "Error while sending work order approval notification:",
//         error
//       );
//     }
//   });

//   // Handle koneksi yang terputus
//   socket.on("disconnect", () => {
//     console.log("Client disconnected");
//   });
// });

// bila terjadi error saat connect ke mongdb maka akan tampil error diterminal
db.on("error", function (err) {
  console.log("connection error: tidak bisa tersambung ke mongodb");
});

/**
 * Listen on provided port, on all network interfaces.
 */

/**
 * kode yang mendeteksi jika koneksi dengan MongoDB telah terbuka dan
 *  aplikasi berhasil terhubung dengan MongoDB,
 */
db.on("open", function () {
  server.listen(port);
  server.on("error", onError);
  server.on("listening", onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
